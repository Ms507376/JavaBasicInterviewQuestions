
1) What is inheritance ?
   Inheritance is an object oriented feature which allows a class to inherit method and data from other class or we can say accquiring 
   properties of parent class in child class.
   
   Use of Inheritance :
   For Method Overriding / Code Reusablity.
   
   
2) What are different types of inheritance supported by Java ?
   Java supports single inheritance , Multi-level inheritance , Hierarchical inheritance.
    Multiple inheritance is not supported by class ,it can be implemented using interface.
    
3) Why Mutiple inheritance is not supported by Java?
   Multiple inheritance is not supported by java.
   Consider a scenario where A,B and C are three classes. The C class inherits  A and B class. If A and B classes have Same Method and 
   we call it from Child class object ,there will be ambiguity to call the method of A or B class.
   Class A 
   {
      void msg ()
      {
        System.out.println( " run A"); 
      }
   }
   
   Class B
   {
     void msg () 
     { 
         System.out.println( " run B");         
     }   
   }
   
   Class C extends A,B 
   {
      C obj = new C();
      obj.msg(); // while Calling method of class A and B there will be ambiguity which method should be called 
   }
  
  
4) What is  Inheritance , Encapsulation and abstraction with real time examples?
   Inheritance   :Accquiring properties of Parent Class in Child class is called Inheritance.( we inherit properties from our ancestor).
   Encapsulation :Wrapping of data and method together in a single unit is called Encapsulation.
                 :It is used to hide internal details of class.
   Abstraction   :Process of hiding the implementation details from users.Only Functionality will be provided to users.
                  e.g ( ATM (We enter 4 digit pin ) while withdrawing the money but we don't know the implemenation ).
                  
5) What is polymorphism ?
   Polymorphism in Java is a concept by which we can perform a single action in different way.
   Compile time polymorphism ,Run time polymorphism.
   Compile time polymorphism :In Compile time polymorphism,Call to a method is resolved at compile time. 
                             :Overloading is a way to achieve compile time polymorphism.(Static binding) 
                             :It provides fast execution as type of an object is determined at compile-time.
                             :We create an object of class and then call the method of the class.
                             
   Run time polymorphism   :In Run time polymorphism ,call to the overriden method is resolved at runtime.
                           :Overriding is a way to achieve run time polymorphism.(dynamic binding)
                           :It provides slower execution as type of an object is determined at runtime.
                           :We call sub class method using super class reference variable in run time polymorphism.
                           
                           Class Bike
                           {
                             Void run()
                           {
                              System.out.println(" running Bike"); 
                           }
                           
                           }
                           
                           Class splendour extends Bike{
                           void run()
                            {
                              System.out.println(" running Splendour"); 
                            }
                           }
           public static void main() 
           {
             Bike b = new splendour();
             b.run() ;           
           }
                           
6)  Can we achieve runtime polymorphism by data members ?
     Runtime polymorphism is not possible by data members we can only achieve by method.
     
7)  Can we override static method in java ?
    No,we can not override a static method in java becuase it's resolved at compile time.
    
8 ) Can we overload a static method in java ?
    yes ,we can overload static method in java by defining different no. of arguments and different method signature.
    
9) Can we override private method in java ?
    No ,we can not override a private method in java because private method is not inherited by subclass in java.
    
10) what is super and this keyword in java ?
     Super : Super keyword always points to parent class contexts.
           : Super keyword is always used to invoke  parent class instance variable/method/constructor.
           : Super() is called in class constructor implicitly by the compiler if there is no super or this.
           
     This : This Keyword always points to current class context.
          : Super() and This() must be the first statement inside constructor otherwise compiler will throw an error.
          : super() and This() we can not use together as either one of them should be the first statement.
          
11) What is final ?
     Final is a keyword .
     If we are defining class/ variable/method as final we can't inherit them  or we can not use in other class.
     final variable:if variable is final ,we can not change its value.
     
12) If we make any class final and inherit them into other class what will happen ?
     ( it will throw compile time error) 
     
13) Can we declare main method as final ?
    yes, we can .
    public static final void main( string[],args).
    
14) Can we declare constructor as final ?
    No ,It will throw compile time error if we are defining as final.




    
          
           
     






















    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
                           
                           
                           
                           
                           
                           
                           
                           
                           
                           
                           
                           
                           
                           
                             
   
                             
   
   
   
   
   
   
   
 

   
      
   
   
   
   


   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
